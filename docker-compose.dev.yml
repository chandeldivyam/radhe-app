version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5438:5432" # Exposing DB on host port 5438
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Wait for DB to initialize
    command: >
      postgres
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=5
      -c hot_standby=on
      -c hot_standby_feedback=on

  backend:
    build:
      context: . # Build context is the monorepo root
      dockerfile: apps/backend/Dockerfile.dev
    depends_on:
      db:
        condition: service_healthy # Wait for DB healthcheck
    env_file:
      - .env # Load environment variables
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages/zero-shared:/app/packages/zero-shared
      - /app/apps/backend/node_modules
      - /app/packages/zero-shared/node_modules
    ports:
      - "8000:8000" # Expose backend port
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  zero_cache:
    build:
      context: .
      dockerfile: apps/zero-cache/Dockerfile.dev
    volumes:
      - replica:/zero_data
      - /app/apps/zero-cache/node_modules
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - ZERO_UPSTREAM_DB=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - ZERO_REPLICA_FILE=/zero_data/replica.db
      - ZERO_DEBUG=true
      - ZERO_AUTH_SECRET=${ZERO_AUTH_SECRET}
    ports:
      - 4848:4848
    networks:
      - app_network

volumes:
  postgres_data:
  replica:

networks:
  app_network:
    driver: bridge
